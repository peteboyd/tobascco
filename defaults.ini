# Defaults
# flag for detecting symmetrically equivalent hydrogens in the MOFs
find_symmetric_h = False
# directory containing the symmetry finding algorithm
symmetry_dir = /home/pboyd/lib/spglib-1.2.3/python/ase/build/lib.linux-x86_64-2.7
# symmetry precision in angstroms
symmetry_precision = 1.e-5
#sbu files to build the database with
# also doubles as the .mol files used to generate input files, if set to blank, then the pwd is used
sbu_files = $HOME/.sbus/all_non_pillared_met.dat $HOME/.sbus/all_organic.dat
# database files containing labelled quotient graphs
topology_files = $HOME/modules/topcryst/rcsr_0.6.0.arc
# set to True, and the program will create SBU input files and then exit, no structures will be tried
create_sbu_input_files = False 
# file extension for the sbu input files
file_extension = mol 
# request only specific topologies to be built (blank builds all in the db)
# doubles as the topology set for SBU input files
topologies =
# topologies to ignore. These will be removed from the topology queue, even if you
# specifically requested them in the 'topologies' directive
ignore_topologies = 
# number of metal SBUs tried per structure (NB: set to 1, might break otherwise)
metal_sbu_per_structure = 1
# number of organic SBUs tried per structure
organic_sbu_per_structure = 1
# Request only the organic SBUs with indices be built. Comma or space delimited
organic_sbus =
# Request only the metal SBUs with indices be built. Comma or space delimited
metal_sbus =
# Request only the following combinations be tried, overrides organic_sbus and metal_sbus
# NOTE: currently only one metal is read as the first index, the rest organic.
# tuples must be in the order: (metal index, organic index, organic..)
# lists of tuples can be included. (1,2,3),(4,5,6) etc.
sbu_combinations =
# overlap tolerance is a scaling factor multiplied by the pairwise addition of
# Van der Waals radii of each atom. This value is used to test bonded atom
# distances as well. Currently set to 1 Angstrom * tol.
overlap_tolerance = 0.4
# set the maximum number of structures to build for a given combination of SBUs
max_structures = 1
# surface area calculation will compute the surface areas of all SBUs and report
# to a .csv file.  This will be conducted before any structure generation.
calc_sbu_surface_area = False
# calc the max distance between each SBU's connect points and report to a .csv file.
calc_max_sbu_span = False
# assign the bond length between SBUs when fitting the net
sbu_bond_length = 1.5
# verbosity options, can be set here or on the command line.  Command line will override these
# options
# the volume of the resulting unit cell must not be lower than x * the cell lengths
cell_vol_tolerance = 0.1
# request a visualization of the barycentric embedding of the nets, then exit.
# this will ignore all SBU combinations and embedding attempts.
show_barycentric_net_only = False
# visualize the underlying embedded net of the constructed MOF.  NB: this includes nodes
# assigned to SBU connect points, so it may look messy
show_embedded_net = False
# print out a .csv file with all the run information in it
get_run_info = False
# max edge length of net to use to build MOFs. There is a polynomial time cost related to
# building MOFs with N edges
max_edge_count = 1000
# min edge length of net to use to build MOFs. This can be kept at zero, but if more 
# expensive nets are calculated, this can be used to ignore the smaller nets.
min_edge_count = 0
# store a reduced representation of the net, keeping only the vertices of the SBUs
# and not the connect points. Edges are between the SBU centre of masses
store_net = False
# optim code only test as developer!! For use in lmfit (NB: depreciated, lmfit no longer used - PB 29/07/15)
optim_code = leastsq
# factor for function minimization tolerance. This value will determine when the 
# optimization routine is converged based on the relative change of the input 
# variables (namely the cell parameter and the cocycle lattice)
opt_parameter_tol = 1e-5
# factor for function minimization tolerance. This is a relative change value, 
# so the optimization of the topology will be considered converged when the 
# objective function change is below this value 
opt_function_tol = 1e-10

verbose = False
quiet = False
silent = True

